{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMyVz67eupNvOjJmDXGhd0q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vallejosoto/LatAm-sobre-ruedas-verdes/blob/main/clustering.PY\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aCshXTb1tFFU"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "864c70b8",
        "outputId": "6d7b9379-66a8-4505-cdc3-1ab0df512a35"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Cargar el archivo de ciudades_movilidad.csv\n",
        "try:\n",
        "    df_ciudades = pd.read_csv(\"ciudades_movilidad.csv\")\n",
        "    print(\"Archivo 'ciudades_movilidad.csv' cargado correctamente.\")\n",
        "    print(\"Primeras filas de df_ciudades:\")\n",
        "    display(df_ciudades.head())\n",
        "    print(\"\\nInformación del DataFrame df_ciudades:\")\n",
        "    df_ciudades.info()\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: El archivo 'ciudades_movilidad.csv' no se encontró. Asegúrate de que esté en la ubicación correcta.\")\n",
        "    df_ciudades = None\n",
        "\n",
        "# Cargar el archivo de indice_paises_ponderado.csv\n",
        "try:\n",
        "    df_paises = pd.read_csv(\"indice_paises_ponderado.csv\")\n",
        "    print(\"\\nArchivo 'indice_paises_ponderado.csv' cargado correctamente.\")\n",
        "    print(\"Primeras filas de df_paises:\")\n",
        "    display(df_paises.head())\n",
        "    print(\"\\nInformación del DataFrame df_paises:\")\n",
        "    df_paises.info()\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: El archivo 'indice_paises_ponderado.csv' no se encontró. Asegúrate de que esté en la ubicación correcta.\")\n",
        "    df_paises = None"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archivo 'ciudades_movilidad.csv' cargado correctamente.\n",
            "Primeras filas de df_ciudades:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           City  mobility_index country_complete\n",
              "0      brasilia       10.519179           Brasil\n",
              "1      curitiba       13.966409           Brasil\n",
              "2     fortaleza       15.402945           Brasil\n",
              "3    montevideo       15.876110          Uruguay\n",
              "4  porto-alegre       16.633797           Brasil"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-756f129b-5861-451b-96c0-020a53fc4eef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_complete</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>Brasil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>Brasil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>Brasil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>Uruguay</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>Brasil</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-756f129b-5861-451b-96c0-020a53fc4eef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-756f129b-5861-451b-96c0-020a53fc4eef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-756f129b-5861-451b-96c0-020a53fc4eef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-87f6a19d-c86b-44cb-8486-2badb3a13616\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87f6a19d-c86b-44cb-8486-2badb3a13616')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-87f6a19d-c86b-44cb-8486-2badb3a13616 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    df_paises = None\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"curitiba\",\n          \"porto-alegre\",\n          \"fortaleza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.418246932028506,\n        \"min\": 10.51917861294072,\n        \"max\": 16.633797370456303,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.966409266409268,\n          16.633797370456303,\n          15.402944595118171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Uruguay\",\n          \"Brasil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Información del DataFrame df_ciudades:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 15 entries, 0 to 14\n",
            "Data columns (total 3 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   City              15 non-null     object \n",
            " 1   mobility_index    15 non-null     float64\n",
            " 2   country_complete  15 non-null     object \n",
            "dtypes: float64(1), object(2)\n",
            "memory usage: 492.0+ bytes\n",
            "\n",
            "Archivo 'indice_paises_ponderado.csv' cargado correctamente.\n",
            "Primeras filas de df_paises:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "              Country  country_index\n",
              "0              Mexico       0.521072\n",
              "1              Brazil       0.514647\n",
              "2         El Salvador       0.467423\n",
              "3  Dominican Republic       0.456657\n",
              "4                Cuba       0.402530"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1db6f092-fbd8-459b-939b-911800ec1668\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Mexico</td>\n",
              "      <td>0.521072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>El Salvador</td>\n",
              "      <td>0.467423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Dominican Republic</td>\n",
              "      <td>0.456657</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cuba</td>\n",
              "      <td>0.402530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1db6f092-fbd8-459b-939b-911800ec1668')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1db6f092-fbd8-459b-939b-911800ec1668 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1db6f092-fbd8-459b-939b-911800ec1668');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fcceb2af-b7d9-47d9-97dc-a59392347c96\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fcceb2af-b7d9-47d9-97dc-a59392347c96')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fcceb2af-b7d9-47d9-97dc-a59392347c96 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    df_paises = None\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Brazil\",\n          \"Cuba\",\n          \"El Salvador\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.048239208470648484,\n        \"min\": 0.4025303716754352,\n        \"max\": 0.5210716774969208,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5146469800104813,\n          0.4025303716754352,\n          0.4674227292820146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Información del DataFrame df_paises:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 18 entries, 0 to 17\n",
            "Data columns (total 2 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Country        18 non-null     object \n",
            " 1   country_index  18 non-null     float64\n",
            "dtypes: float64(1), object(1)\n",
            "memory usage: 420.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "b2305c7c",
        "outputId": "65f3a034-ae04-42c7-8e99-597e56ad1764"
      },
      "source": [
        "# Renombrar la columna 'Country' en df_paises para que coincida con 'country_complete' en df_ciudades\n",
        "df_paises_renombrado = df_paises.rename(columns={'Country': 'country_complete'})\n",
        "\n",
        "# Unir los DataFrames\n",
        "# Usamos un merge left para mantener todas las ciudades y añadir la información del país\n",
        "df_combinado = pd.merge(df_ciudades, df_paises_renombrado, on='country_complete', how='left')\n",
        "\n",
        "print(\"DataFrame combinado:\")\n",
        "display(df_combinado.head())\n",
        "\n",
        "print(\"\\nInformación del DataFrame combinado:\")\n",
        "df_combinado.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame combinado:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           City  mobility_index country_complete  country_index\n",
              "0      brasilia       10.519179           Brasil            NaN\n",
              "1      curitiba       13.966409           Brasil            NaN\n",
              "2     fortaleza       15.402945           Brasil            NaN\n",
              "3    montevideo       15.876110          Uruguay       0.238826\n",
              "4  porto-alegre       16.633797           Brasil            NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20252fa7-5082-480e-bbf3-262b3b074620\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>Brasil</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>Brasil</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>Brasil</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>Uruguay</td>\n",
              "      <td>0.238826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>Brasil</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20252fa7-5082-480e-bbf3-262b3b074620')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20252fa7-5082-480e-bbf3-262b3b074620 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20252fa7-5082-480e-bbf3-262b3b074620');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8bc2e7c7-0757-47f8-8dc5-ba85121fc8b8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8bc2e7c7-0757-47f8-8dc5-ba85121fc8b8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8bc2e7c7-0757-47f8-8dc5-ba85121fc8b8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_combinado\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"curitiba\",\n          \"porto-alegre\",\n          \"fortaleza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.418246932028506,\n        \"min\": 10.51917861294072,\n        \"max\": 16.633797370456303,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.966409266409268,\n          16.633797370456303,\n          15.402944595118171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Uruguay\",\n          \"Brasil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2388261151767312,\n        \"max\": 0.2388261151767312,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2388261151767312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Información del DataFrame combinado:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 15 entries, 0 to 14\n",
            "Data columns (total 4 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   City              15 non-null     object \n",
            " 1   mobility_index    15 non-null     float64\n",
            " 2   country_complete  15 non-null     object \n",
            " 3   country_index     6 non-null      float64\n",
            "dtypes: float64(2), object(2)\n",
            "memory usage: 612.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "8d1f8800",
        "outputId": "8a52d83b-5b5a-40f9-da0d-5b809b248875"
      },
      "source": [
        "# Corregir el nombre del país en df_ciudades\n",
        "if df_ciudades is not None:\n",
        "    df_ciudades['country_complete'] = df_ciudades['country_complete'].replace('Brasil', 'Brazil')\n",
        "    print(\"Nombre del país 'Brasil' corregido a 'Brazil' en df_ciudades.\")\n",
        "    display(df_ciudades.head())\n",
        "else:\n",
        "    print(\"df_ciudades no se cargó correctamente, no se puede corregir el nombre del país.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre del país 'Brasil' corregido a 'Brazil' en df_ciudades.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           City  mobility_index country_complete\n",
              "0      brasilia       10.519179           Brazil\n",
              "1      curitiba       13.966409           Brazil\n",
              "2     fortaleza       15.402945           Brazil\n",
              "3    montevideo       15.876110          Uruguay\n",
              "4  porto-alegre       16.633797           Brazil"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-72e304de-cf58-411b-b2b4-4e089b27fb1d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_complete</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>Brazil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>Brazil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>Brazil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>Uruguay</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>Brazil</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72e304de-cf58-411b-b2b4-4e089b27fb1d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-72e304de-cf58-411b-b2b4-4e089b27fb1d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-72e304de-cf58-411b-b2b4-4e089b27fb1d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7c720039-7eca-4c8d-a45f-41f9bd93cfb9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c720039-7eca-4c8d-a45f-41f9bd93cfb9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7c720039-7eca-4c8d-a45f-41f9bd93cfb9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"df_ciudades no se carg\\u00f3 correctamente, no se puede corregir el nombre del pa\\u00eds\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"curitiba\",\n          \"porto-alegre\",\n          \"fortaleza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.418246932028506,\n        \"min\": 10.51917861294072,\n        \"max\": 16.633797370456303,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.966409266409268,\n          16.633797370456303,\n          15.402944595118171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Uruguay\",\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "06dea15c",
        "outputId": "1ad55545-d791-4514-b42c-986236c18438"
      },
      "source": [
        "# Renombrar la columna 'Country' en df_paises para que coincida con 'country_complete' en df_ciudades\n",
        "df_paises_renombrado = df_paises.rename(columns={'Country': 'country_complete'})\n",
        "\n",
        "# Unir los DataFrames con el nombre del país corregido en df_ciudades\n",
        "# Usamos un merge left para mantener todas las ciudades y añadir la información del país\n",
        "df_combinado = pd.merge(df_ciudades, df_paises_renombrado, on='country_complete', how='left')\n",
        "\n",
        "print(\"DataFrame combinado después de la corrección:\")\n",
        "display(df_combinado.head())\n",
        "\n",
        "print(\"\\nInformación del DataFrame combinado después de la corrección:\")\n",
        "df_combinado.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame combinado después de la corrección:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           City  mobility_index country_complete  country_index\n",
              "0      brasilia       10.519179           Brazil       0.514647\n",
              "1      curitiba       13.966409           Brazil       0.514647\n",
              "2     fortaleza       15.402945           Brazil       0.514647\n",
              "3    montevideo       15.876110          Uruguay       0.238826\n",
              "4  porto-alegre       16.633797           Brazil       0.514647"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8eed4903-85e5-4495-9d32-4a3d3f7a290c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>Uruguay</td>\n",
              "      <td>0.238826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8eed4903-85e5-4495-9d32-4a3d3f7a290c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8eed4903-85e5-4495-9d32-4a3d3f7a290c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8eed4903-85e5-4495-9d32-4a3d3f7a290c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3bcd6d3d-b540-4839-bbb7-f24b0f7ccfcb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bcd6d3d-b540-4839-bbb7-f24b0f7ccfcb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3bcd6d3d-b540-4839-bbb7-f24b0f7ccfcb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_combinado\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"curitiba\",\n          \"porto-alegre\",\n          \"fortaleza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.418246932028506,\n        \"min\": 10.51917861294072,\n        \"max\": 16.633797370456303,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.966409266409268,\n          16.633797370456303,\n          15.402944595118171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Uruguay\",\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12335084067620929,\n        \"min\": 0.2388261151767312,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.2388261151767312,\n          0.5146469800104813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Información del DataFrame combinado después de la corrección:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 15 entries, 0 to 14\n",
            "Data columns (total 4 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   City              15 non-null     object \n",
            " 1   mobility_index    15 non-null     float64\n",
            " 2   country_complete  15 non-null     object \n",
            " 3   country_index     15 non-null     float64\n",
            "dtypes: float64(2), object(2)\n",
            "memory usage: 612.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2f91a117"
      },
      "source": [
        "# Task\n",
        "Carga los archivos \"ciudades_movilidad.csv\" y \"indice_paises_ponderado.csv\" de Google Drive, únelos corrigiendo el nombre de \"Brasil\" a \"Brazil\" en la columna \"country complete\" antes de la unión, y luego determina el mejor método de clustering para identificar en qué ciudades de América Latina se cumplen mejor las condiciones para aumentar o implementar la venta de vehículos eléctricos de pequeña escala."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dacd6a5e"
      },
      "source": [
        "## Preparar los datos para clustering\n",
        "\n",
        "### Subtask:\n",
        "Seleccionar las columnas relevantes para el clustering (`mobility_index` y `country_index`) y escalar los datos si es necesario.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d14753d4"
      },
      "source": [
        "**Reasoning**:\n",
        "Select the relevant columns for clustering and scale the data using StandardScaler.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "d21ffd2d",
        "outputId": "809e5950-01dc-4595-8a4d-291e741557c6"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Select the relevant columns\n",
        "X = df_combinado[['mobility_index', 'country_index']]\n",
        "\n",
        "# Initialize and fit the StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Convert scaled data back to a DataFrame\n",
        "df_scaled = pd.DataFrame(X_scaled, columns=X.columns)\n",
        "\n",
        "print(\"Scaled DataFrame:\")\n",
        "display(df_scaled.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Scaled DataFrame:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   mobility_index  country_index\n",
              "0       -1.530641       0.685318\n",
              "1       -1.023871       0.685318\n",
              "2       -0.812689       0.685318\n",
              "3       -0.743130      -1.576551\n",
              "4       -0.631743       0.685318"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e94b16c6-471a-44c6-bc66-5b1e54e07eec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.530641</td>\n",
              "      <td>0.685318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.023871</td>\n",
              "      <td>0.685318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.812689</td>\n",
              "      <td>0.685318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.743130</td>\n",
              "      <td>-1.576551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.631743</td>\n",
              "      <td>0.685318</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e94b16c6-471a-44c6-bc66-5b1e54e07eec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e94b16c6-471a-44c6-bc66-5b1e54e07eec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e94b16c6-471a-44c6-bc66-5b1e54e07eec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4d0cc9b0-04ef-4517-9d79-a01fe222b748\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d0cc9b0-04ef-4517-9d79-a01fe222b748')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4d0cc9b0-04ef-4517-9d79-a01fe222b748 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_scaled\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.35550136655811304,\n        \"min\": -1.5306406650084714,\n        \"max\": -0.6317434947119532,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -1.0238705780012278,\n          -0.6317434947119532,\n          -0.8126885577942844\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0115386300311346,\n        \"min\": -1.5765511704253905,\n        \"max\": 0.6853179681912368,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.5765511704253905,\n          0.6853179681912368\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "50a5126f"
      },
      "source": [
        "## Determinar el número óptimo de clusters (k)\n",
        "\n",
        "\n",
        "Utilizar un método como el método del codo (Elbow Method) para encontrar un número apropiado de clusters para K-Means.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "85298531"
      },
      "source": [
        "**Reasoning**:\n",
        "Implement the Elbow Method to find the optimal number of clusters by calculating and plotting inertia for different values of k.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "c940c8db",
        "outputId": "63262bbe-b590-4247-e8de-b9cb09e9a1e6"
      },
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initialize an empty list to store inertia values\n",
        "inertia = []\n",
        "\n",
        "# Iterate through a range of possible cluster numbers\n",
        "for k in range(1, 11):\n",
        "    # Instantiate KMeans with the current number of clusters\n",
        "    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Added n_init to suppress warning\n",
        "\n",
        "    # Fit the KMeans model to the scaled data\n",
        "    kmeans.fit(df_scaled)\n",
        "\n",
        "    # Append the inertia to the list\n",
        "    inertia.append(kmeans.inertia_)\n",
        "\n",
        "# Plot the inertia values against the number of clusters\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(range(1, 11), inertia, marker='o')\n",
        "plt.xlabel('Number of Clusters (k)')\n",
        "plt.ylabel('Inertia')\n",
        "plt.title('Elbow Method for Optimal k')\n",
        "plt.xticks(range(1, 11))\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8c0dad7d"
      },
      "source": [
        "## Aplicar el algoritmo k-means\n",
        "\n",
        "\n",
        "Ejecutar K-Means con el número óptimo de clusters.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "8e2839f2",
        "outputId": "f71d58db-f616-456c-f989-6a9e2c8c9c65"
      },
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Instantiate KMeans with the optimal number of clusters (visually determined as 3 from the Elbow plot)\n",
        "# Using k=3 as the optimal number based on the Elbow method observation.\n",
        "k = 3\n",
        "kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n",
        "\n",
        "# Fit the KMeans model to the scaled data\n",
        "kmeans.fit(df_scaled)\n",
        "\n",
        "# Add the cluster labels to the original combined DataFrame\n",
        "df_combinado['cluster'] = kmeans.labels_\n",
        "\n",
        "print(\"DataFrame combinado con etiquetas de cluster:\")\n",
        "display(df_combinado.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame combinado con etiquetas de cluster:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           City  mobility_index country_complete  country_index  cluster\n",
              "0      brasilia       10.519179           Brazil       0.514647        1\n",
              "1      curitiba       13.966409           Brazil       0.514647        1\n",
              "2     fortaleza       15.402945           Brazil       0.514647        1\n",
              "3    montevideo       15.876110          Uruguay       0.238826        2\n",
              "4  porto-alegre       16.633797           Brazil       0.514647        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68d7d3dd-2eeb-4755-95f7-6222fe3a493b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>country_index</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>Uruguay</td>\n",
              "      <td>0.238826</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68d7d3dd-2eeb-4755-95f7-6222fe3a493b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68d7d3dd-2eeb-4755-95f7-6222fe3a493b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68d7d3dd-2eeb-4755-95f7-6222fe3a493b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8d971704-168b-4293-a345-6b3326503a22\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d971704-168b-4293-a345-6b3326503a22')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8d971704-168b-4293-a345-6b3326503a22 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_combinado\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"curitiba\",\n          \"porto-alegre\",\n          \"fortaleza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.418246932028506,\n        \"min\": 10.51917861294072,\n        \"max\": 16.633797370456303,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.966409266409268,\n          16.633797370456303,\n          15.402944595118171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Uruguay\",\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12335084067620929,\n        \"min\": 0.2388261151767312,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.2388261151767312,\n          0.5146469800104813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fb1fcfd5"
      },
      "source": [
        "## Analizar e interpretar los clusters\n",
        "\n",
        "### Subtask:\n",
        "Examinar las características de cada cluster para entender qué grupos de ciudades se formaron y qué implican para la venta de vehículos eléctricos.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c346f8e5"
      },
      "source": [
        "**Reasoning**:\n",
        "Calculate the mean of the numerical columns for each cluster to understand their characteristics.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "daf9dbaf",
        "outputId": "c2b4be2c-cb41-4349-df92-1bd4c3ed116b"
      },
      "source": [
        "# Group by 'cluster' and calculate the mean of numerical columns\n",
        "cluster_means = df_combinado.groupby('cluster')[['mobility_index', 'country_index']].mean()\n",
        "\n",
        "print(\"Media de las características por cluster:\")\n",
        "display(cluster_means)\n",
        "\n",
        "# Optional: Count the number of cities in each cluster\n",
        "cluster_counts = df_combinado['cluster'].value_counts().sort_index()\n",
        "\n",
        "print(\"\\nNúmero de ciudades por cluster:\")\n",
        "display(cluster_counts)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Media de las características por cluster:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         mobility_index  country_index\n",
              "cluster                               \n",
              "0             32.408376       0.374108\n",
              "1             18.326403       0.514647\n",
              "2             17.268124       0.237335"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-944d204a-12dd-4cc6-946a-86a35d7c6ae0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.408376</td>\n",
              "      <td>0.374108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18.326403</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17.268124</td>\n",
              "      <td>0.237335</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-944d204a-12dd-4cc6-946a-86a35d7c6ae0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-944d204a-12dd-4cc6-946a-86a35d7c6ae0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-944d204a-12dd-4cc6-946a-86a35d7c6ae0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fbe4d316-8040-4c9e-91f6-94030c4431fe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fbe4d316-8040-4c9e-91f6-94030c4431fe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fbe4d316-8040-4c9e-91f6-94030c4431fe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4843d395-3f01-4266-80f0-7d703bd0f56f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster_means')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4843d395-3f01-4266-80f0-7d703bd0f56f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cluster_means');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cluster_means",
              "summary": "{\n  \"name\": \"cluster_means\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.452309299503828,\n        \"min\": 17.268123675170425,\n        \"max\": 32.40837648562137,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          32.40837648562137,\n          18.326402715004036,\n          17.268123675170425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13866038319206553,\n        \"min\": 0.23733473690252013,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.3741079172108334,\n          0.5146469800104813,\n          0.23733473690252013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Número de ciudades por cluster:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "cluster\n",
              "0    3\n",
              "1    9\n",
              "2    3\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e2252814"
      },
      "source": [
        "## Visualizar los resultados del clustering\n",
        "\n",
        "Crear gráficos para visualizar los clusters y la asignación de cada ciudad.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "e8282380",
        "outputId": "5f27d46a-ed0b-4129-9506-99b35e27b751"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Create a scatter plot\n",
        "plt.figure(figsize=(12, 8)) # Increased figure size for better readability of labels\n",
        "sns.scatterplot(data=df_combinado, x='mobility_index', y='country_index', hue='cluster', palette='viridis', s=100)\n",
        "\n",
        "# Add labels and title\n",
        "plt.xlabel('Mobility Index')\n",
        "plt.ylabel('Country Index')\n",
        "plt.title('City Clusters based on Mobility and Country Index with City Names')\n",
        "\n",
        "# Add legend\n",
        "plt.legend(title='Cluster')\n",
        "\n",
        "# Add city names as annotations\n",
        "for i, row in df_combinado.iterrows():\n",
        "    plt.annotate(row['City'], (row['mobility_index'], row['country_index']), textcoords=\"offset points\", xytext=(0,10), ha='center')\n",
        "\n",
        "# Adjust layout to prevent labels from overlapping\n",
        "plt.tight_layout()\n",
        "\n",
        "# Display the plot\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "35f25b94"
      },
      "source": [
        "## Identificar las ciudades más adecuadas\n",
        "\n",
        "\n",
        "Basado en el análisis de los clusters, identificar qué ciudades dentro de los clusters son más prometedoras para la implementación o aumento de la venta de vehículos eléctricos de pequeña escala.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "15500597"
      },
      "source": [
        "**Reasoning**:\n",
        "Examine the cluster means and counts to identify which clusters are most promising for EV sales and then filter the combined dataframe to list the cities within those clusters.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "b38fbf7a",
        "outputId": "a10c76f0-8839-45c1-f42a-175764829770"
      },
      "source": [
        "# Based on the previous analysis:\n",
        "# Cluster 0: High mobility index, moderate country index (3 cities)\n",
        "# Cluster 1: Moderate mobility index, high country index (9 cities)\n",
        "# Cluster 2: Low mobility index, low country index (3 cities)\n",
        "\n",
        "# Clusters 0 and 1 appear most promising:\n",
        "# Cluster 0 has high mobility, suggesting a need for transportation.\n",
        "# Cluster 1 has a high country index, potentially indicating a more favorable environment for EV adoption.\n",
        "\n",
        "# Filter for cities in Cluster 0 and Cluster 1\n",
        "promising_cities_df = df_combinado[df_combinado['cluster'].isin([0, 1])].sort_values(by=['cluster', 'mobility_index'], ascending=[True, False])\n",
        "\n",
        "print(\"Ciudades más prometedoras para la implementación o aumento de la venta de vehículos eléctricos de pequeña escala:\")\n",
        "display(promising_cities_df[['City', 'country_complete', 'mobility_index', 'country_index', 'cluster']])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ciudades más prometedoras para la implementación o aumento de la venta de vehículos eléctricos de pequeña escala:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "              City country_complete  mobility_index  country_index  cluster\n",
              "14          bogota         Colombia       34.824961       0.338577        0\n",
              "13     mexico-city           Mexico       32.474171       0.521072        0\n",
              "12            lima             Peru       29.925997       0.262675        0\n",
              "11       sao-paulo           Brazil       25.099002       0.514647        1\n",
              "10  rio-de-janeiro           Brazil       24.159938       0.514647        1\n",
              "9           recife           Brazil       20.579738       0.514647        1\n",
              "8         salvador           Brazil       20.086253       0.514647        1\n",
              "6   belo-horizonte           Brazil       18.490362       0.514647        1\n",
              "4     porto-alegre           Brazil       16.633797       0.514647        1\n",
              "2        fortaleza           Brazil       15.402945       0.514647        1\n",
              "1         curitiba           Brazil       13.966409       0.514647        1\n",
              "0         brasilia           Brazil       10.519179       0.514647        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e437ade-3672-495f-94dd-3d981adede0e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>bogota</td>\n",
              "      <td>Colombia</td>\n",
              "      <td>34.824961</td>\n",
              "      <td>0.338577</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>mexico-city</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>32.474171</td>\n",
              "      <td>0.521072</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>lima</td>\n",
              "      <td>Peru</td>\n",
              "      <td>29.925997</td>\n",
              "      <td>0.262675</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>sao-paulo</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>25.099002</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>rio-de-janeiro</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>24.159938</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>recife</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>20.579738</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>salvador</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>20.086253</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>belo-horizonte</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>18.490362</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e437ade-3672-495f-94dd-3d981adede0e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2e437ade-3672-495f-94dd-3d981adede0e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2e437ade-3672-495f-94dd-3d981adede0e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-66f85ea3-e366-4386-b1cb-9d804b0203c8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66f85ea3-e366-4386-b1cb-9d804b0203c8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-66f85ea3-e366-4386-b1cb-9d804b0203c8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(promising_cities_df[['City', 'country_complete', 'mobility_index', 'country_index', 'cluster']])\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"curitiba\",\n          \"fortaleza\",\n          \"bogota\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Mexico\",\n          \"Brazil\",\n          \"Colombia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.613740090451867,\n        \"min\": 10.51917861294072,\n        \"max\": 34.824961360123645,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          13.966409266409268,\n          15.402944595118171,\n          34.824961360123645\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08513005732806081,\n        \"min\": 0.2626746891143199,\n        \"max\": 0.5210716774969208,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.5210716774969208,\n          0.5146469800104813,\n          0.3385773850212595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7e768c45"
      },
      "source": [
        "\n",
        "Analiza los datos de \"ciudades_movilidad.csv\" y \"indice_paises_ponderado.csv\" para identificar las ciudades de América Latina con mayor potencial para la venta de vehículos eléctricos de pequeña escala (patinetas, bicicletas eléctricas) utilizando diferentes métodos de clustering. Realiza el preprocesamiento necesario, incluyendo la corrección del nombre \"Brasil\" a \"Brazil\" en la columna \"country complete\" antes de unir los dataframes. Visualiza los resultados de cada método de clustering, incluyendo los nombres de las ciudades en los gráficos, y compara los resultados para determinar las ciudades más adecuadas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6915d663"
      },
      "source": [
        "## Seleccionar otro método de clustering\n",
        "\n",
        "\n",
        "Elegir un método alternativo a K-Means (por ejemplo, Clustering Jerárquico o DBSCAN).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "6ea5d7df",
        "outputId": "762313f2-ffa8-4fdb-fb1a-5b1a0f6aa36c"
      },
      "source": [
        "from sklearn.cluster import DBSCAN\n",
        "\n",
        "# Initialize DBSCAN. The parameters eps and min_samples need to be chosen carefully,\n",
        "# possibly after some exploration or based on domain knowledge.\n",
        "# For demonstration, we'll use some initial values.\n",
        "# A common approach for selecting eps is to use a k-distance graph.\n",
        "# For now, we'll pick some values to proceed.\n",
        "dbscan = DBSCAN(eps=0.5, min_samples=5)\n",
        "\n",
        "# Fit DBSCAN to the scaled data\n",
        "dbscan.fit(df_scaled)\n",
        "\n",
        "# Add the cluster labels to the original combined DataFrame.\n",
        "# DBSCAN assigns -1 to noise points.\n",
        "df_combinado['dbscan_cluster'] = dbscan.labels_\n",
        "\n",
        "print(\"DataFrame combinado con etiquetas de cluster DBSCAN:\")\n",
        "display(df_combinado.head())\n",
        "\n",
        "print(\"\\nNúmero de ciudades por cluster DBSCAN:\")\n",
        "display(df_combinado['dbscan_cluster'].value_counts().sort_index())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame combinado con etiquetas de cluster DBSCAN:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           City  mobility_index country_complete  country_index  cluster  \\\n",
              "0      brasilia       10.519179           Brazil       0.514647        1   \n",
              "1      curitiba       13.966409           Brazil       0.514647        1   \n",
              "2     fortaleza       15.402945           Brazil       0.514647        1   \n",
              "3    montevideo       15.876110          Uruguay       0.238826        2   \n",
              "4  porto-alegre       16.633797           Brazil       0.514647        1   \n",
              "\n",
              "   dbscan_cluster  \n",
              "0              -1  \n",
              "1              -1  \n",
              "2               0  \n",
              "3              -1  \n",
              "4               0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2900945f-b835-4da7-becf-2f2248ee8156\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>country_index</th>\n",
              "      <th>cluster</th>\n",
              "      <th>dbscan_cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>Uruguay</td>\n",
              "      <td>0.238826</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2900945f-b835-4da7-becf-2f2248ee8156')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2900945f-b835-4da7-becf-2f2248ee8156 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2900945f-b835-4da7-becf-2f2248ee8156');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1d943806-9358-45c6-98f6-179bd7f9547f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d943806-9358-45c6-98f6-179bd7f9547f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1d943806-9358-45c6-98f6-179bd7f9547f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_combinado['dbscan_cluster']\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"curitiba\",\n          \"porto-alegre\",\n          \"fortaleza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.418246932028506,\n        \"min\": 10.51917861294072,\n        \"max\": 16.633797370456303,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.966409266409268,\n          16.633797370456303,\n          15.402944595118171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Uruguay\",\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12335084067620929,\n        \"min\": 0.2388261151767312,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.2388261151767312,\n          0.5146469800104813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dbscan_cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": -1,\n        \"max\": 0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          -1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Número de ciudades por cluster DBSCAN:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "dbscan_cluster\n",
              "-1    10\n",
              " 0     5\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dbscan_cluster</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-1</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b159330a"
      },
      "source": [
        "**Reasoning**:\n",
        "Analyze and interpret the DBSCAN clusters by examining the characteristics of each cluster, including the noise points (cluster -1), to understand how DBSCAN grouped the cities and what this implies compared to the K-Means results.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 703
        },
        "id": "8ab1df91",
        "outputId": "b836d466-6dc4-4b15-dcc8-05d59b0b9635"
      },
      "source": [
        "# Separate the noise points from the clustered points\n",
        "noise_points = df_combinado[df_combinado['dbscan_cluster'] == -1]\n",
        "clustered_points = df_combinado[df_combinado['dbscan_cluster'] != -1]\n",
        "\n",
        "print(\"Cities identified as noise by DBSCAN:\")\n",
        "display(noise_points[['City', 'country_complete', 'mobility_index', 'country_index', 'dbscan_cluster']])\n",
        "\n",
        "# If there are any clusters found (excluding noise), analyze their means\n",
        "if not clustered_points.empty:\n",
        "    dbscan_cluster_means = clustered_points.groupby('dbscan_cluster')[['mobility_index', 'country_index']].mean()\n",
        "    print(\"\\nMean of characteristics for DBSCAN clusters (excluding noise):\")\n",
        "    display(dbscan_cluster_means)\n",
        "else:\n",
        "    print(\"\\nNo distinct clusters found by DBSCAN (all points are noise or in a single cluster).\")\n",
        "\n",
        "# Compare with K-Means results (optional, for interpretation)\n",
        "print(\"\\nComparison with K-Means Cluster Means:\")\n",
        "display(cluster_means)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cities identified as noise by DBSCAN:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "              City country_complete  mobility_index  country_index  \\\n",
              "0         brasilia           Brazil       10.519179       0.514647   \n",
              "1         curitiba           Brazil       13.966409       0.514647   \n",
              "3       montevideo          Uruguay       15.876110       0.238826   \n",
              "5     buenos-aires        Argentina       16.699536       0.200723   \n",
              "7         santiago            Chile       19.228725       0.272455   \n",
              "10  rio-de-janeiro           Brazil       24.159938       0.514647   \n",
              "11       sao-paulo           Brazil       25.099002       0.514647   \n",
              "12            lima             Peru       29.925997       0.262675   \n",
              "13     mexico-city           Mexico       32.474171       0.521072   \n",
              "14          bogota         Colombia       34.824961       0.338577   \n",
              "\n",
              "    dbscan_cluster  \n",
              "0               -1  \n",
              "1               -1  \n",
              "3               -1  \n",
              "5               -1  \n",
              "7               -1  \n",
              "10              -1  \n",
              "11              -1  \n",
              "12              -1  \n",
              "13              -1  \n",
              "14              -1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5450cca-f467-4ad0-a1e0-c45c512c9336\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "      <th>dbscan_cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>brasilia</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>10.519179</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>curitiba</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>13.966409</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>montevideo</td>\n",
              "      <td>Uruguay</td>\n",
              "      <td>15.876110</td>\n",
              "      <td>0.238826</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>buenos-aires</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>16.699536</td>\n",
              "      <td>0.200723</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>santiago</td>\n",
              "      <td>Chile</td>\n",
              "      <td>19.228725</td>\n",
              "      <td>0.272455</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>rio-de-janeiro</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>24.159938</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>sao-paulo</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>25.099002</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>lima</td>\n",
              "      <td>Peru</td>\n",
              "      <td>29.925997</td>\n",
              "      <td>0.262675</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>mexico-city</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>32.474171</td>\n",
              "      <td>0.521072</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>bogota</td>\n",
              "      <td>Colombia</td>\n",
              "      <td>34.824961</td>\n",
              "      <td>0.338577</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5450cca-f467-4ad0-a1e0-c45c512c9336')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5450cca-f467-4ad0-a1e0-c45c512c9336 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5450cca-f467-4ad0-a1e0-c45c512c9336');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-76cb82e3-4716-4f48-af9f-c8269ddcd09d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76cb82e3-4716-4f48-af9f-c8269ddcd09d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-76cb82e3-4716-4f48-af9f-c8269ddcd09d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(cluster_means)\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"mexico-city\",\n          \"curitiba\",\n          \"rio-de-janeiro\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Brazil\",\n          \"Uruguay\",\n          \"Mexico\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.300827960898005,\n        \"min\": 10.51917861294072,\n        \"max\": 34.824961360123645,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          32.47417116422513,\n          13.966409266409268,\n          24.159938485198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13770917642666822,\n        \"min\": 0.2007232794796016,\n        \"max\": 0.5210716774969208,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.5146469800104813,\n          0.2388261151767312,\n          0.5210716774969208\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dbscan_cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": -1,\n        \"max\": -1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Mean of characteristics for DBSCAN clusters (excluding noise):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                mobility_index  country_index\n",
              "dbscan_cluster                               \n",
              "0                    18.238619       0.514647"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22d29349-6452-4814-bc32-926868630559\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dbscan_cluster</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18.238619</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22d29349-6452-4814-bc32-926868630559')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22d29349-6452-4814-bc32-926868630559 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22d29349-6452-4814-bc32-926868630559');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_d1779e21-1035-47f6-a6a5-82e1278158c2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dbscan_cluster_means')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d1779e21-1035-47f6-a6a5-82e1278158c2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dbscan_cluster_means');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dbscan_cluster_means",
              "summary": "{\n  \"name\": \"dbscan_cluster_means\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"dbscan_cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.23861915362184,\n        \"max\": 18.23861915362184,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.23861915362184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.5146469800104813,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5146469800104813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Comparison with K-Means Cluster Means:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         mobility_index  country_index\n",
              "cluster                               \n",
              "0             32.408376       0.374108\n",
              "1             18.326403       0.514647\n",
              "2             17.268124       0.237335"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d50816db-f3b2-4d5c-a8d5-3d638c7a3e81\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.408376</td>\n",
              "      <td>0.374108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18.326403</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17.268124</td>\n",
              "      <td>0.237335</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d50816db-f3b2-4d5c-a8d5-3d638c7a3e81')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d50816db-f3b2-4d5c-a8d5-3d638c7a3e81 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d50816db-f3b2-4d5c-a8d5-3d638c7a3e81');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c4905475-9de1-4ce0-928c-43bdf547f32f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4905475-9de1-4ce0-928c-43bdf547f32f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c4905475-9de1-4ce0-928c-43bdf547f32f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_50c1b20b-97e1-48f9-bc1d-1622de34d8d6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster_means')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_50c1b20b-97e1-48f9-bc1d-1622de34d8d6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cluster_means');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cluster_means",
              "summary": "{\n  \"name\": \"cluster_means\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.452309299503828,\n        \"min\": 17.268123675170425,\n        \"max\": 32.40837648562137,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          32.40837648562137,\n          18.326402715004036,\n          17.268123675170425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13866038319206553,\n        \"min\": 0.23733473690252013,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.3741079172108334,\n          0.5146469800104813,\n          0.23733473690252013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cce78414"
      },
      "source": [
        "**Reasoning**:\n",
        "Visualize the results of the DBSCAN clustering to compare it with the K-Means visualization and further understand how the cities were grouped.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "43bcbc44",
        "outputId": "80086a7b-2e79-45f3-be71-023e81eba0ce"
      },
      "source": [
        "# Create a scatter plot for DBSCAN clusters\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.scatterplot(data=df_combinado, x='mobility_index', y='country_index', hue='dbscan_cluster', palette='viridis', s=100)\n",
        "\n",
        "# Add labels and title\n",
        "plt.xlabel('Mobility Index')\n",
        "plt.ylabel('Country Index')\n",
        "plt.title('City Clusters (DBSCAN) based on Mobility and Country Index with City Names')\n",
        "\n",
        "# Add legend\n",
        "plt.legend(title='DBSCAN Cluster')\n",
        "\n",
        "# Add city names as annotations\n",
        "for i, row in df_combinado.iterrows():\n",
        "    plt.annotate(row['City'], (row['mobility_index'], row['country_index']), textcoords=\"offset points\", xytext=(0,10), ha='center')\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Display the plot\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAMWCAYAAAAgRDUeAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAA0BxJREFUeJzs3XV4lfX/x/HXWY8lNXJsdEhMQRCQkhggpSiICBsSKoggShikhKiEICUojUGjlIKgSDcoiICkdI1enc/vD347Xw6rM2RnxPNxXbuunbvO+86z89rn/twWY4wRAAAAAAAA4EQuGV0AAAAAAAAAHj2EUgAAAAAAAHA6QikAAAAAAAA4HaEUAAAAAAAAnI5QCgAAAAAAAE5HKAUAAAAAAACnI5QCAAAAAACA0xFKAQAAAAAAwOkIpQAAAAAAAOB0hFIAHgmhoaGKjIzM6DLsHD58WBaLRVOmTMnoUjJE/fr11b59+4wu4743fvx45cuXT9HR0Q5NX716dZUsWTKdq7q3HsVzwWKx6M0330x1uilTpshisejw4cO2YdWrV1f16tVtrx/G7ZfUeiPjPWjH2p3nSmrTOuvayfENAP9DKAXggXbw4EG99tprKlCggLy8vOTv76/KlSvr888/140bN5Kdb8+ePerXr1+6/UG4evVqPf/888qZM6c8PDwUFBSkhg0bat68eenyfklJ73X8L9auXauffvpJPXv2tA1bvXq1LBaL7cfT01M5cuRQ9erVNXjwYJ09ezbRchL+sL/9JygoSDVq1NDSpUsTTX/48GG1adNGBQsWlJeXl3LmzKmqVauqb9++SdY5f/581atXT9myZZOHh4dy586tZs2a6Zdffkly+iVLlshisSh37tyyWq1JThMaGiqLxaLOnTsnGpewDebMmWMbFhkZqZiYGE2YMCHJ5eHeu/24+v333xONN8YoODhYFotFDRo0yIAKU7dkyRL169cvo8twmh07duiVV15RcHCwPD09lSVLFtWqVUuTJ09WfHx8RpcnSRo8eLAWLFjgtPdLOI63bNnitPe83504cUL9+vXTjh070mX58fHxmjx5sqpXr64sWbLI09NToaGhatOmTar7YezYsfc87EsIES0Wi+bOnZtofL9+/WSxWHTu3Ll7+r4AkBaEUgAeWIsXL1apUqX0/fffq2HDhho9erSGDBmifPnyqXv37urSpYtt2n379mnixIm213v27FH//v3TJbDp27evatSooT/++EOvvfaaxo8fr+7du+vq1atq2rSpZs2adc/fMynpuY7/1aeffqqaNWuqUKFCica99dZbmj59ur788kt1795dWbJkUd++fVW8ePFkw6ABAwZo+vTpmjZtmnr06KGzZ8+qfv36+vHHH23THDhwQI8//riWL1+uFi1a6IsvvlCnTp2UNWtWDR061G55xhi1adNGzz//vE6fPq1u3bpp/Pjx6tSpk/755x/VrFlT69atS1THzJkzFRoaqpMnTyZba4KJEyfqxIkTqW4rLy8vRUREaPjw4TLGpDo97h0vL68kz9dff/1Vx48fl6enZ7rX0KpVK924cUMhISHJThMSEqIbN26oVatWtmFLlixR//79072++8GkSZNUrlw5rVq1Si1bttTYsWPVp08feXt7q23btonO74zi7FAK0k8//aSffvrJ9vrEiRPq379/uoRSN27cUIMGDfTqq6/KGKP3339f48aNU+vWrbV+/XqVL19ex48fl5T0eZ0eodTtBgwYwGcIgPuSW0YXAAB349ChQ3rppZcUEhKiX375Rbly5bKN69Spkw4cOKDFixfbhjnjy6MkzZkzRwMGDNALL7ygWbNmyd3d3Taue/fuWr58uWJjY51SS3q5du2afHx87nr+M2fOaPHixRo/fnyS46tUqaIXXnjBbtjOnTtVp04dNW3aVHv27LHb35JUr149lStXzva6bdu2ypEjh7755htbS5YRI0bo6tWr2rFjR6Iv+GfOnLF7PWzYME2ZMkVdu3bV8OHDZbFYbOM++OADTZ8+XW5u9h+h165d08KFCzVkyBBNnjxZM2fOVK1atZJcx8cee0z79u3Txx9/rFGjRiU5ze2aNWumTz75RKtWrdIzzzyT6vS4N+rXr6/Zs2dr1KhRdvt71qxZKlu2rFNaF7i6usrV1TXFaSwWi7y8vNK9lvvRhg0b9Prrr6tixYpasmSJ/Pz8bOO6du2qLVu26I8//sjACu/Of73O4hYPDw+nvVf37t21bNkyjRgxQl27drUb17dvX40YMcL22pHz+l4KCwvTjh07NH/+fD3//PNOe18AcAQtpQA8kD755BNdvXpVX331VaKAQpIKFSpk11Lq9j6lpkyZohdffFGSVKNGDVvT9tWrVysiIkLZsmVLMjiqU6eOihYtmmJdvXv3VpYsWfT111/bBVIJwsPDU7zdJ7n+LyIjIxUaGmo37Ntvv1XZsmXl5+cnf39/lSpVSp9//nmq65hg6dKlqlKlinx8fOTn56dnn31Wf/75Z6L39fX11cGDB1W/fn35+fmpZcuWkqT9+/eradOmypkzp7y8vJQ3b1699NJLioqKSnEbLV68WHFxcckGNkkpU6aMRo4cqUuXLumLL75IdfrAwEB5e3vbBQkHDx5U3rx5k2xxEhQUZPv9xo0bGjJkiIoVK6bPPvvMLpBK0KpVK5UvX95u2Pz583Xjxg29+OKLeumllzRv3jzdvHkzyfpCQ0PVunVrh1tLlS1bVlmyZNHChQtTnTbB1q1bValSJXl7eyt//vyJQsCYmBj16dNHZcuWVUBAgHx8fFSlShWtWrUq0bJSOtYSXLp0SV27drXdPlWoUCENHTo00W2Mly5dUmRkpAICAhQYGKiIiAhdunTJ4fX6559/9OKLLypLlizKlCmTnnrqKbsAWvrfbZDff/+9Bg0apLx588rLy0s1a9bUgQMHHH6vFi1a6Pz58/r5559tw2JiYjRnzhy9/PLLSc5z7do1vfPOO7btULRoUX322WfJtlCYOXOmihYtKi8vL5UtW1a//fab3XhH+p65s5+fyMhIjRkzRpLsbm01xig0NFSNGzdOtIybN28qICBAr732WkqbRJMnT9YzzzyjoKAgeXp6qkSJEho3blyi6UJDQ9WgQQP9/vvvKl++vLy8vFSgQAFNmzYt0bR//vmnnnnmGXl7eytv3rwaOHBgsre/3ql///6yWCyaOXOmXSCVoFy5cnb9CTqyf1LqN8lisdjdFplw+9OBAwcUGRmpwMBABQQEqE2bNrp+/brdfNeuXdPUqVNt+yOhroRl7NmzRy+//LIyZ86sp59+WpMnT5bFYtH27dsT1TF48GC5urrq33//dWg7JUi4pv/7779q0qSJfH19lT17dr377ruJbnNMy7n6119/6YUXXlCWLFnk5eWlcuXKadGiRbbxZ86cUfbs2VW9enW7bX3gwAH5+PioefPmyda8a9cuWSwWu+Vt3bpVFotFTzzxhN209erVU4UKFWyvb/9MXb16tZ588klJUps2bWz74c79vGfPHtWoUUOZMmVSnjx59MknnyRbW4Ljx49rwoQJql27dqJASroVQr377rvKmzevpMTndWhoqP7880/9+uuvtrqqV6+uf/75RxaLxS7QSrBu3TpZLBZ98803qdb30ksvqUiRIg61llqzZo1efPFF5cuXT56engoODtbbb7+dqEuEhGPp6NGjatCggXx9fZUnTx7btWf37t165pln5OPjo5CQkCRbnTr6ueHIZxCABxehFIAH0g8//KACBQqoUqVKaZ63atWqeuuttyRJ77//vqZPn67p06erePHiatWqlc6fP6/ly5fbzXPq1Cn98ssveuWVV5Jd7v79+/XXX3+pSZMmSX45upd+/vlntWjRQpkzZ9bQoUP18ccfq3r16lq7dq2klNdRkqZPn65nn31Wvr6+Gjp0qHr37q09e/bo6aefTvTlNy4uTuHh4QoKCtJnn32mpk2bKiYmRuHh4dqwYYM6d+6sMWPGqEOHDvrnn39SDRjWrVunrFmzpng7UlJeeOEFeXt7292KkSAqKkrnzp3T2bNn9eeff+qNN97Q1atX7fZXSEiIjh07luptdb///rsuXLigl19+OU3/yZ45c6Zq1KihnDlz6qWXXtKVK1f0ww8/JDv9Bx98oLi4OH388ccOLf+JJ56w7d/UXLx4UfXr11fZsmX1ySefKG/evHrjjTf09ddf26a5fPmyJk2apOrVq2vo0KHq16+fzp49q/DwcLtbW1I71iTp+vXrqlatmmbMmKHWrVtr1KhRqly5st577z1169bNNp0xRo0bN9b06dP1yiuvaODAgTp+/LgiIiIcWq/Tp0+rUqVKWr58uTp27KhBgwbp5s2batSokebPn59o+o8//ljz58/Xu+++q/fee08bNmywhaqOCA0NVcWKFe2+9C1dulRRUVF66aWXEk1vjFGjRo00YsQI1a1bV8OHD1fRokXVvXt3u+2Q4Ndff1XXrl31yiuvaMCAATp//rzq1q37n1v2vPbaa6pdu7Yk2c796dOny2Kx6JVXXtHSpUt14cIFu3l++OEHXb58OcVrnCSNGzdOISEhev/99zVs2DAFBwerY8eOti+itztw4IBeeOEF1a5dW8OGDVPmzJkVGRlpF36fOnVKNWrU0I4dO9SrVy917dpV06ZNc+gL5/Xr17Vy5UpVrVpV+fLlS3X6tO6ftGjWrJmuXLmiIUOGqFmzZpoyZYrd7ZPTp0+Xp6enqlSpYtsfdwaAL774oq5fv67Bgwerffv2tmvezJkzE73fzJkzVb16deXJkyfNtcbHxys8PFxZs2bVZ599pmrVqmnYsGH68ssvbdOk5Vz9888/9dRTT2nv3r3q1auXhg0bJh8fHzVp0sR2XgYFBWncuHH69ddfNXr0aEmS1WpVZGSk/Pz8NHbs2GTrLVmypAIDA+0C2zVr1sjFxUU7d+7U5cuXbctbt26dqlatmuRyihcvrgEDBkiSOnToYNsPt09/8eJF1a1bV2XKlNGwYcNUrFgx9ezZM8k+Cm+3dOlSxcXF2d1CmxYjR45U3rx5VaxYMVtdH3zwgQoUKKDKlSsnewz4+fklGTLfydXVVR9++KF27tyZ5LXydrNnz9b169f1xhtvaPTo0QoPD9fo0aPVunXrRNPGx8erXr16Cg4O1ieffKLQ0FC9+eabmjJliurWraty5cpp6NCh8vPzU+vWrXXo0CHbvI5+bjjyGQTgAWcA4AETFRVlJJnGjRs7PE9ISIiJiIiwvZ49e7aRZFatWmU3XXx8vMmbN69p3ry53fDhw4cbi8Vi/vnnn2TfY+HChUaSGTFihEM1HTp0yEgykydPtg2rVq2aqVatWqJpIyIiTEhIiO11ly5djL+/v4mLi0t2+cmt45UrV0xgYKBp37693fBTp06ZgIAAu+ERERFGkunVq5fdtNu3bzeSzOzZs1Nf0Ts8/fTTpmzZsomGr1q1KtVllilTxmTOnNn2evLkyUZSoh9PT08zZcoUu3n/+OMP4+3tbSSZsLAw06VLF7NgwQJz7do1u+k+//xzI8nMnz/f4XU6ffq0cXNzMxMnTrQNq1SpUpLHaEhIiHn22WeNMca0adPGeHl5mRMnTqS6DTp06GC8vb1TraVatWpGkhk2bJhtWHR0tAkLCzNBQUEmJibGGGNMXFyciY6Otpv34sWLJkeOHObVV1+1DXPkWPvoo4+Mj4+P+fvvv+2G9+rVy7i6upqjR48aY4xZsGCBkWQ++eQT2zRxcXGmSpUqic6FpHTt2tVIMmvWrLENu3LlismfP78JDQ018fHxxpj/bcfixYvbrWPCvt29e3eK75NwXG3evNl88cUXxs/Pz1y/ft0YY8yLL75oatSoYYyx35e3r9/AgQPtlvfCCy8Yi8ViDhw4YBuWcKxu2bLFNuzIkSPGy8vLPPfcc4lqOXTokG3YndeJpK4lnTp1Mkn9mbdv3z4jyYwbN85ueKNGjUxoaKixWq0pbpuE7XC78PBwU6BAAbthISEhRpL57bffbMPOnDljPD09zTvvvGMblrBPN27caDddQEBAovW+086dO40k06VLlxRrTuDo/klqeyaQZPr27Wt73bdvXyPJ7pwxxpjnnnvOZM2a1W6Yj4+P3efQncto0aJFonEtWrQwuXPnth3bxhizbds2h86X24/jBAnX9AEDBthN+/jjj9tdl9NyrtasWdOUKlXK3Lx50zbMarWaSpUqmcKFCydan0yZMpm///7bfPrpp0aSWbBgQYrrYYwxzz77rClfvrzt9fPPP2+ef/554+rqapYuXWq3XRYuXGib7s5zZfPmzcluu4Rr57Rp02zDoqOjTc6cOU3Tpk1TrO/tt982ksz27dtTXRdjkj6vH3vssSQ//ydMmGAkmb1799qGxcTEmGzZsiV5PN0u4Vj+9NNPTVxcnClcuLApU6aM7TxPOPbOnj1rmyepc3zIkCHGYrGYI0eO2IYlHEuDBw+2Dbt48aLx9vY2FovFfPvtt7bhf/31V6Jzx9HPDUc+gwA82GgpBeCBk/Bf0fRojeTi4qKWLVtq0aJFunLlim34zJkzValSJeXPnz9D6rpTYGCgrl27ZndbkaN+/vlnXbp0SS1atNC5c+dsP66urqpQoUKSt2+98cYbdq8DAgIkScuXL7e7RcUR58+fV+bMmdNctyT5+vra7ZcEY8aM0c8//6yff/5ZM2bMUI0aNdSuXTu7px0+9thjtid0HT58WJ9//rmaNGmiHDly2HWCfzf78dtvv5WLi4uaNm1qG9aiRQstXbpUFy9eTHa+Dz/80OHWUpkzZ9aNGzcc2t5ubm52rTA8PDz02muv6cyZM9q6daukW/85T+hvxWq16sKFC4qLi1O5cuW0bds227yOHGuzZ89WlSpVlDlzZrtjqlatWoqPj7e1cFiyZInc3NzsjidXV9ckn0SYlCVLlqh8+fJ6+umnbcN8fX3VoUMHHT58WHv27LGbvk2bNnZ9ylSpUkXSrVsAHdWsWTPduHFDP/74o65cuaIff/wx2Vv3lixZIldXV1srxQTvvPOOjDGJWltUrFhRZcuWtb3Oly+fGjdurOXLl6fbE+OKFCmiChUq2LW8uHDhgpYuXaqWLVsmebvq7by9vW2/J7RQrFatmv75559Et+6WKFHCts0lKXv27CpatKjd9l+yZImeeuopu9ths2fP7lCLtrSeq2ndP2nx+uuv272uUqWKzp8/b6vxbpYhSa1bt9aJEyfsrsszZ86Ut7e33fXmXtR7535x5Fy9cOGCfvnlF1tLsYRz//z58woPD9f+/fvtbjH84osvFBAQoBdeeEG9e/dWq1atHGrpU6VKFW3btk3Xrl2TdKtFa/369RUWFqY1a9ZIutV6ymKx2F0f0srX19eutaCHh4fKly+f6jUjPT//mzVrJi8vL7tzdvny5Tp37lyqLRtvd3trqZQ63L/9HL927ZrOnTunSpUqyRiT5K2k7dq1s/0eGBiookWLysfHR82aNbMNL1q0qAIDA+22o6OfG//l7x0ADwZCKQAPHH9/f0lKMpy4F1q3bq0bN27Ymrjv27dPW7duTbVZfnrXdbuOHTuqSJEiqlevnvLmzatXX31Vy5Ytc2je/fv3S5KeeeYZZc+e3e7np59+StTpt5ubm60fjAT58+dXt27dNGnSJGXLlk3h4eEaM2ZMqv1JJTB3+QSgq1evJvlHf/ny5VWrVi3VqlVLLVu21OLFi1WiRAm9+eabiomJsU1XpEgRTZ8+XefOndOuXbs0ePBgubm5qUOHDlqxYoWku9uPM2bMUPny5XX+/HkdOHDA9qS/mJgYzZ49O9n5ChQooFatWunLL7/UyZMnU3yPhG2WWmggSblz507USXKRIkUkye72zKlTp6p06dLy8vJS1qxZlT17di1evNhuPzpyrO3fv1/Lli1LdDwl9BuWcEwdOXJEuXLlkq+vr938qfXVluDIkSNJTptwW+qRI0fsht95S1dCGJpSUHinhPWYNWuW5s2bp/j4+EQd8d9eX+7cuRMdo8nVV7hw4UTLKFKkiK5fv66zZ886XGNatW7dWmvXrrXVM3v2bMXGxjp069HatWtVq1Yt+fj4KDAwUNmzZ9f7778vSYnO/6RuqcucObPd9j9y5EiS28GRYyKt52pa909a3ItjLal/etSuXVu5cuWyBRJWq1XffPONGjdufNcBiJeXl7Jnz56o3jv3iyPn6oEDB2SMUe/evROd/3379pVk/yCJLFmyaNSoUdq1a5cCAgIcetCDdCuUiouL0/r167Vv3z6dOXNGVapUUdWqVe1CqRIlSihLliyOb4w75M2bN9E19s5tk5T0/PwPDAxUw4YN7fpkmjlzpvLkyZPmB1+0bNlShQoVSrFvqaNHjyoyMlJZsmSx9TlWrVo1SYnP8aSOpYCAgCS3Y0BAgN12dPRz47/8vQPgwcDT9wA8cPz9/ZU7d+50e6JSiRIlVLZsWVs/BzNmzJCHh4fdf/2SUqxYMUm3Ove8WwmdEd/pzlYTQUFB2rFjh5YvX66lS5dq6dKlmjx5slq3bq2pU6em+B4JHYhOnz5dOXPmTDT+zqfKeXp6ysUl8f8whg0bpsjISC1cuFA//fST3nrrLQ0ZMkQbNmxIFGLdLmvWrGn6opYgNjZWf//9t0qWLJnqtC4uLqpRo4Y+//xz7d+/X4899pjdeFdXV5UqVUqlSpVSxYoVVaNGDdvT8m7fj02aNEn1vfbv36/NmzdLSjpkmDlzpjp06JDs/AlP8xs6dGiK73fx4kVlypTJ7r/Y/8WMGTMUGRmpJk2aqHv37goKCpKrq6uGDBmigwcP2qZz5FizWq2qXbu2evTokeR7JQRizpZcn2BpDUVffvlltW/fXqdOnVK9evUUGBh4D6rLOC+99JLefvttzZw5U++//75mzJihcuXKpRoEHTx4UDVr1lSxYsU0fPhwBQcHy8PDQ0uWLNGIESMSdU58r7Z/cgoVKiQ3N7f/dM1NSnLBb0qt1+7FuiZ1bru6uurll1/WxIkTNXbsWK1du1YnTpxIUwsZR2u9Gwn7/N1331V4eHiS0xQqVMjudUKfjRcvXtTx48cdOp/KlSsnLy8v/fbbb8qXL5+CgoJUpEgRValSRWPHjlV0dLTWrFmj55577j+tz93ux9s/N8LCwv5TDUlp3bq1Zs+erXXr1qlUqVJatGiROnbsmORnc0oSWkslfHbfKT4+XrVr19aFCxfUs2dPFStWTD4+Pvr3338VGRnp8DnuyHZ09HPjv/y9A+DBQCgF4IHUoEEDffnll1q/fr0qVqyY5vlTa23SunVrdevWTSdPntSsWbP07LPPpnrLWZEiRVS0aFEtXLhQn3/+eaL/MDsic+bMSd4mkNR/8D08PNSwYUM1bNhQVqtVHTt21IQJE9S7d28VKlQo2XUsWLCgpFt/6KXlCXhJSQh2PvzwQ61bt06VK1fW+PHjNXDgwGTnKVasmObOnZvm95ozZ45u3LiR7BefO8XFxUm61boqJeXKlZMkW0ulp59+WpkzZ9Y333yj999/P9UvcDNnzpS7u7umT5+eaNrff/9do0aN0tGjR5PtiLlgwYJ65ZVXNGHCBLunRt3p0KFDthYdqTlx4kSiR8r//fffkmR7iuOcOXNUoEABzZs3z+5YSWjdcLvUjrWCBQvq6tWrqR5PISEhWrlypa5evWp3fuzbt8+h9QoJCUly2r/++ss2Pj0899xzeu2117RhwwZ99913Kda3YsUKXblyxa4VS3L1JbRavN3ff/+tTJkyJWp9kFYpXeOyZMmiZ599VjNnzlTLli21du1ajRw5MtVl/vDDD4qOjtaiRYvsjuekbvl1VEhISJLbwZFjIlOmTHrmmWf0yy+/6NixYwoODk71vRzZPwnX+jsf2vBfWlJJjrVyTErr1q01bNgw/fDDD1q6dKmyZ8/u8HXwbjl6rhYoUECS5O7u7tDnybJlyzRp0iT16NFDM2fOVEREhDZu3JjonyF3SriNbs2aNcqXL5/tttAqVaooOjpaM2fO1OnTp5Pt5DzB3e6D1NSrV0+urq6aMWPGXXd2nlJtdevWVfbs2TVz5kxVqFBB169fv+v3Sei4vn///mrUqJHduN27d+vvv//W1KlT7To2T49b5xz93JBS/wwC8GDj9j0AD6QePXrIx8dH7dq10+nTpxONP3jwYIpPb0r4sp7ck+JatGghi8WiLl266J9//nH4v9L9+/fX+fPn1a5dO1socruffvpJP/74Y7LzFyxYUH/99ZfdrTs7d+5M9JSZ8+fP2712cXFR6dKlJUnR0dGSkl/H8PBw+fv7a/DgwYqNjU1UgyO3DV2+fDnR+pUqVUouLi62909OxYoVdfHixTT167Nz50517dpVmTNnVqdOnVKdPjY2Vj/99JM8PDxsQc6aNWuSXN8lS5ZI+t9tKZkyZVLPnj21d+9e9ezZM8n/kM+YMUObNm2SdCuUqlKlipo3b64XXnjB7qd79+6SlOojuz/88EPFxsam+Ojxbdu2Ofy0ybi4OE2YMMH2OiYmRhMmTFD27NltfRglBGi3r9/GjRu1fv16u2U5cqw1a9ZM69evT/TUSunW8ZdwrNSvX19xcXEaN26cbXx8fLztaVypqV+/vjZt2mRX47Vr1/Tll18qNDRUJUqUcGg5aeXr66tx48apX79+atiwYYr1xcfH64svvrAbPmLECFksFtWrV89u+Pr16+367zp27JgWLlyoOnXq/OfWLKld41q1aqU9e/aoe/fucnV1TfJpgndK6piJiorS5MmT77rO+vXra8OGDbbzSbp1DUrqaWNJ6du3r4wxatWqVZIB9NatW22tKRzdP/7+/sqWLZvd094kpfiEOEf4+Pik+nTSpJQuXVqlS5fWpEmTNHfuXL300kuphjj/laPnalBQkKpXr64JEyYkeQvy7Z8nly5dUrt27VS+fHkNHjxYkyZN0rZt2zR48GCHaqpSpYo2btyoVatW2UKpbNmyqXjx4ho6dKhtmpSkdl7creDgYLVv314//fRTktczq9WqYcOG6fjx4ynWllxdbm5uatGihb7//ntNmTJFpUqVsl2H0yqhtdSOHTu0aNGiROMk+3PcGOPQ0zDTytHPDUc+gwA82GgpBeCBVLBgQc2aNUvNmzdX8eLF1bp1a5UsWVIxMTFat26dZs+ercjIyGTnDwsLk6urq4YOHaqoqCh5enrqmWeeUVBQkKRb/cjUrVtXs2fPVmBgoJ599lmH6mrevLl2796tQYMGafv27WrRooVCQkJ0/vx5LVu2TCtXrrTrF+JOr776qoYPH67w8HC1bdtWZ86c0fjx4/XYY4/ZdZjbrl07XbhwQc8884zy5s2rI0eOaPTo0QoLC7OFMCmt47hx49SqVSs98cQTeumll5Q9e3YdPXpUixcvVuXKlRN9abvTL7/8ojfffFMvvviiihQpori4OFtLodQ633322Wfl5uamFStWJHlb25o1a3Tz5k3Fx8fr/PnzWrt2rRYtWqSAgADNnz8/yVsOly5damvtcObMGc2aNUv79+9Xr169bH19DB06VFu3btXzzz9v+4N227ZtmjZtmrJkyaKuXbvalte9e3f9+eefGjZsmFatWqUXXnhBOXPm1KlTp7RgwQJt2rRJ69at08aNG3XgwAG9+eabSa5rnjx59MQTT2jmzJnq2bNnstskobVUcrcibN26VRcuXHCoQ2DpVp9SQ4cO1eHDh1WkSBF999132rFjh7788ku5u7tLutXacN68eXruuef07LPP6tChQxo/frxKlChh9+XekWOte/fuWrRokRo0aKDIyEiVLVtW165d0+7duzVnzhwdPnxY2bJlU8OGDVW5cmX16tVLhw8fVokSJTRv3jyH+yLr1auXvvnmG9WrV09vvfWWsmTJoqlTp+rQoUOaO3dumm9lSYuIiIhUp2nYsKFq1KihDz74QIcPH1aZMmX0008/aeHCheratautlWKCkiVLKjw8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6Ny5c/r000+1evVqPf/885KkLVu2KDg4WD/++KPGjBmj06dPq3bt2rbzpVOnTpo1a5aKFCmiBQsWqFOnTvrtt9/UqFGjZN/7wIED2rJli1xdXfXYY49pypQpCgkJ0Y0bN1S4cGH9/PPP+ueff9SpU6c0X5NT8++//6p+/fp68skntXPnTo0bN05fffWVBg4ceNfLBAAgwxgkEhUVZSSZqKiodH+vatWqmeLFixur1Wob1rNnT1O8eHFjjDEhISGmSZMmqS7n008/NWXLlrW99vPzM1OmTEly2smTJ5uAgADb6759+5oyZcrYXkdERJjGjRsn+15nz541kszu3btTrQvp4/Lly8bT09NMnDgx0bhVq1YZSebixYu2Ydu3bzeSzKFDh4wxt44BSWbHjh12896576tVq2a6dOmS4vITlrVhwwbbNHv37jWSzMaNG5Ndh8cee8yMHj06yXEjRowwISEhxhhjrl69atzd3c3MmTNt42NiYkzu3LnNJ598YlfTggUL7JZz57GdnNmzZ5usWbPaXt95jtSsWdMMHjzY7nydPn26yZUrl+18/fvvv40k8/3335ssWbKYTz75xJw7d854e3ub77//3m5bbdu2zfj5+ZkffvjBGJP0Offll1+azJkzm6tXr9qGLV682Li4uJhTp06luk63u3Nbh4SEmBEjRhhjjFmzZo3x9/c3N2/etJunYMGCZsKECcYYYypUqGA6depkN75y5cq2bVutWjUTEBBggoKCTHR0tDHm1nUsd+7cpkCBAsbV1dX8+++/xhhjoqOjjbe3twkLCzPvvfdektu7UqVKpn379nbv9+KLL5r69eunuJ4hISHmlVdesb22Wq0mKCjIjBs3zhjj2DaNiIgwOXLksK1HUtvsdgcOHLDt7wS5c+c2gwYNspvuySefNB07djTGGHPo0CEjyUyaNMk2/s8//zSSzN69e23bxNfX10gyhw8fNsYYc+TIEbttmaBmzZqmV69edseUMcZIMvPnzzfGGHPmzBnj5uZmfvvtN9v4ihUrmp49eya1KY0xxjzxxBNGkrly5YoxxpiqVasaHx8fu2neeOMNI8ls3rzZXL582bi4uNg+vxJ0797dlChRwrbeuXLlsn2uBQQEmMmTJ9um/eijj0ydOnXs5j927JiRZPbt25dsrbg71apVM48//rjdsNuPm7u9DlWsWNF2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oaHauHGjDh8+rHPnziXb4sTd3V2dO3fWxo0btXXrVkVGRuqpp56yfQkvXLiw5s2bpx07dmjnzp16+eWXHW694uPjozfeeEPdu3fXsmXLtGfPHrVv317Xr19X27ZtU63/0KFD2rFjh86dO6fo6GgVKlRIsbGxGj16tP755x9Nnz49Uee+d+rTp4+mTZumw4cP6/Dhw4qMjNTw4cP13HPPafTo0XryySc1a9YsVahQQd27d9fChQu1cuVKtWjRQnny5FGxYsU0ffp0nThxQvHx8WrZsqVda7fQ0FDt2rVL+/bt07lz5xQbG6uWLVvKy8tLERER+uOPP7Rq1Sp17txZrVq1SrFD+7Ru61q1aqlixYpq0qSJfvrpJx0+fFjr1q3TBx98YHtiZ+fOnfXVV19p6tSp2r9/vwYOHKhdu3bZtbS7du2a/vjjD7vr2HvvvaccOXIoKChIzZo107hx4/TNN9+oWbNm6tWrlxYvXpxkTd27d9eUKVM0btw47d+/X8OHD9e8efP07rvvprifUnO32/ROkydP1tixYzV+/HhZLBadOnVKp06dsrX+6N69u4YOHarvvvtO+/btU69evbRjx44Ur+t3Cg0N1dWrV9W2bVutWLFC+/bts30xnj17trJnz64vv/xS3333nTp27Kh69eql2IJSunUuNWnSRL1799bevXvVokUL27h8+fLJw8PDdl4sWrQo0T87Ro4cqZiYGD322GOaM2eORowYoQkTJki61XLMy8tL7dq10969e9W0aVOtWLFCvXv31siRIx3ed506ddKFCxfUokULbd68WQcPHtTy5cvVpk0bhwJy3Ft3e8506dJFX3/9tSZPnqy///5bffv21Z9//mk3Tf/+/TVkyBCNGjVKf//9t3bv3q3Jkydr+PDhDtdXuHBhbdmyRcuXL9fs2bNVo0YNbdiwQTExMZo3b57Onj2rgIAA+fr6avr06dq7d682btyoZcuW2f4pUaRIEb388stydXVVeHi4fvjhB02ePFl16tRRyZIlU70tPOHzz8/PTwULFlSjRo1sLRBbt26tbNmyaePGjSlek5955hl98cUX2r59u7Zs2aLXX389xYfTdOzYUceOHVPnzp31119/aeHCherbt6+6detmWy8ASElsdJy+7DE9xUAqwcXTlzT9o9kOTQvclfTu3OpB5OyOzjt27Ghef/114+/v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/Plr9pOTk6P09HSLFwBciclk0kcffVTq/UZHR2v27Nml3i8AAAAAlFc2C6V+//13FRQUyM/Pz2K7n5+fkpOTi9TH1KlTVbNmTYtgKzIyUm+//bZiYmL00ksvadeuXbrrrrtUUFBw1X7mzJkjLy8v8yswMLBkFwUAJeTr66sqVarYugwAAAAAsBqbL3ReUnPnztWGDRu0ceNGubi4mLffd999uvvuu9W4cWP16dNHn376qQ4cOKDY2Nir9jVt2jSlpaWZX2fOnLHCFQD4Nzp37qxx48Zp4sSJ8vHxkZ+fn1asWKHMzEyNGDFCVapUUf369bV161bzMbt27VKbNm3k7OysgIAAPfnkk8rPz7foc/z48XriiSfk6+srf39/zZo1y7w/KChIknTPPffIZDKZ30vSxx9/rBYtWsjFxUU333yznn32WXPfDzzwgAYOHGhRf15enqpVq6a3337bfO6/T99LSUlRr1695Orqqrp162rdunWXfQapqal6+OGHVb16dXl6eqpLly46cuSIRZtly5apXr16cnJyUkhIiNauXVuszxkAAAAAyorNQqlq1arJ3t5eZ8+etdh+9uxZ+fv7X/PY+fPna+7cudqxY4eaNGlyzbY333yzqlWrpp9++umqbZydneXp6WnxAlD+rVmzRtWqVdP+/fs1btw4PfLII+rfv7/at2+vw4cPq1u3bhoyZIiysrL066+/qnv37mrdurWOHDmiZcuW6a233tLzzz9/WZ/u7u7at2+f5s2bp+eee06fffaZJOnAgQOSpFWrVikpKcn8fvfu3Ro6dKgmTJigH374QW+88YZWr16tF154QZI0aNAgffLJJ8rIyDCfZ/v27crKytI999xzxWsbPny4zpw5o507d+qDDz7Q66+/ftlDIPr376+UlBRt3bpVhw4dUosWLdS1a1f98ccfkqSNGzdqwoQJevzxx/Xdd99p9OjRGjFihHbu3FkKnz4AAAAA/EuGDbVp08aIiooyvy8oKDBq1aplzJkz56rHvPTSS4anp6exd+/eIp3jzJkzhslkMj7++OMi15WWlmZIMtLS0op8DADruv32243bbrvN/D4/P99wd3c3hgwZYt6WlJRkSDL27t1rPPXUU0ZISIhRWFho3r906VLDw8PDKCgouGKfhmEYrVu3NqZOnWp+L8nYuHGjRZuuXbsaL774osW2tWvX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V71799bp06fN+4cPH64+ffpo/vz5CggIUNWqVTV27Fjl5eWZ2/z5558aOnSofHx85ObmprvuuksnTpww7//555/Vq1cv+fj4yN3dXY0aNdKWLVuuek3nz5/X/fffr1q1asnNzc38AIK/++f0vaCgIM2ePVtDhw6Vp6enRo0aJUn66quv1LFjR7m6uiowMFDjx49XZmam+bjXX39dwcHBcnFxkZ+fn/r163fdzxwAAABA5UIoBQAlsGbNGjk4OGj//v1avHixFi5cqDfffLNIx+bl5SkiIkJVqlTR7t27tWfPHnl4eCgyMlK5ubnmdjt37tTJkye1c+dOrVmzRqtXr7YItoYPH66DBw9q06ZN2rt3rwzDUPfu3c3B1dixY5WTk6Mvv/xSx44d00svvXTNp2lmZ2erZcuW2rx5s7777juNGjVKQ4YM0f79+695PfPnz1fTpk317bffavr06Tp58qQiIyN177336ujRo3r33Xf11VdfKSoqSpJ08OBBjR8/Xs8995wSEhK0bds2derUqUifHQAAAIDKg+l7AFACgYGBeuWVV2QymRQSEqJjx47plVde0ciRI6977LvvvqvCwkK9+eabMplMkqRVq1bJ29tbsbGx6tatmyTJx8dHr732muzt7dWwYUP16NFDMTExGjlypE6cOKFNmzZpz549at++vSRp3bp1CgwM1EcffaT+/fsrMTFR9957rxo3bixJuvnmm69ZV61atTR58mTz+3Hjxmn79u1677331KZNm6se16VLFz3++OPm9w8//LAGDRpkHlEVHBysJUuW6Pbbb9eyZcuUmJgod3d39ezZU1WqVFGdOnXUvHnz635uAAAAACoXRkoBQAnceuut5kBJktq1a6cTJ06ooKDgusceOXJEP/30k6pUqSIPDw95eHjI19dX2dnZOnnypLldo0aNZG9vb34fEBCglJQUSVJ8fLwcHBzUtm1b8/6qVasqJCRE8fHxkqTx48fr+eefV4cOHTRz5kwdPXrUou9L577rrrskSQUFBZo9e7YaN24sX19feXh4aPv27UpMTLzm9bRq1eqy61u9erW5fw8PD0VERKiwsFCnTp3SnXfeqTp16ujmm2/WkCFDtG7dOmVlZV33cwMAAABQuTBSCgBKmclkMq8vdcnf14LKyMhQy5YttW7dusuOrV69uvnnfz7lzmQyqbCwsMh1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Q8rLy7P47mnYsKFq167Ndw/wD/+8fy5Zt26dqlWrpltuuUXTpk1TVlaWLcoDyq2CggJt2LBBmZmZateuHd89QBH98965pDJ97zjYugD8T3JysiTJz8/PYrufn595H4Ari4yMVN++fVW3bl2dPHlSTz31lO666y7t3btX9vb2ti4PKBcKCws1ceJEdejQQbfccoukv757nJyc5O3tbdGW7x7A0pXuH0l64IEHVKdOHdWsWVNHjx7V1KlTlZCQoOjoaBtWC5QPx44dU7t27ZSdnS0PDw9t3LhRYWFhiouL47sHuIar3TtS5fveIZQCUCn8fXpr48aN1aRJE9WrV0+xsbHq2rWrDSsDyo+xY8fqu+++01dffWXrUoAK52r3z6hRo8w/N27cWAEBAeratatOnjypevXqWbtMoFwJCQlRXFyc0tLS9MEHH2jYsGHatWuXrcsCyr2r3TthYWGV7nuH6XvliL+/vyRd9tSJs2fPmvcBKJqbb75Z1apV008//WTrUoByISoqSp9++ql27typm266ybzd399fubm5Sk1NtWjPdw/wP1e7f66kbdu2ksT3DyDJyclJ9evXV8uWLTVnzhw1bdpUixcv5rsHuI6r3TtXUtG/dwilypG6devK399fMTEx5m3p6enat2+fxfxRANf3yy+/6Pz58woICLB1KYBNGYahqKgobdy4UV988YXq1q1rsb9ly5ZydHS0+O5JSEhQYmIi3z244V3v/rmSuLg4SeL7B7iCwsJC5eTk8N0DFNOle+dKKvr3DtP3rCwjI8MiwTx16pTi4uLk6+ur2rVra+LEiXr++ecVHBysunXravr06apZs6bFU8aAG9G17h1fX189++yzuvfee+Xv76+TJ0/qiSeeUP369RUREWHDqgHbGzt2rNavX6+PP/5YVapUMa/V4eXlJVdXV3l5eemhhx7SpEmT5OvrK09PT40bN07t2rXj6Ue44V3v/jl58qTWr1+v7t27q2rVqjp69Kgee+wxderUSU2aNLFx9YBtTZs2TXfddZdq166tCxcuaP369YqNjdX27dv57gGu4Vr3TqX83jFgVTt37jQkXfYaNmyYYRiGUVhYaEyfPt3w8/MznJ2dja5duxoJCQm2LRooB65172RlZRndunUzqlevbjg6Ohp16tQxRo4caSQnJ9u6bMDmrnTfSDJWrVplbnPx4kXj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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e37ad7be"
      },
      "source": [
        "## Comparar los resultados\n",
        "\n",
        "Comparar los clusters obtenidos con este nuevo método con los resultados de K-Means.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 724
        },
        "id": "d8e19456",
        "outputId": "5aedb43a-40da-461b-8dd3-003821569fd5"
      },
      "source": [
        "# 1. Compare the number of clusters found by each method\n",
        "print(\"Number of clusters found by K-Means (excluding noise):\", df_combinado['cluster'].nunique())\n",
        "print(\"Number of clusters found by DBSCAN (excluding noise):\", df_combinado['dbscan_cluster'].nunique() - (1 if -1 in df_combinado['dbscan_cluster'].unique() else 0))\n",
        "\n",
        "# 2. Examine the characteristics of the clusters from both methods\n",
        "print(\"\\nK-Means Cluster Means:\")\n",
        "display(cluster_means)\n",
        "\n",
        "print(\"\\nDBSCAN Cluster Means (excluding noise):\")\n",
        "if not clustered_points.empty:\n",
        "    display(dbscan_cluster_means)\n",
        "else:\n",
        "    print(\"No distinct clusters found by DBSCAN (all points are noise or in a single cluster).\")\n",
        "\n",
        "\n",
        "# 3. Analyze which cities fall into which clusters for each method.\n",
        "print(\"\\nCity assignments by K-Means Cluster:\")\n",
        "for cluster_label in sorted(df_combinado['cluster'].unique()):\n",
        "    cities_in_cluster = df_combinado[df_combinado['cluster'] == cluster_label]['City'].tolist()\n",
        "    print(f\"K-Means Cluster {cluster_label}: {cities_in_cluster}\")\n",
        "\n",
        "print(\"\\nCity assignments by DBSCAN Cluster:\")\n",
        "for cluster_label in sorted(df_combinado['dbscan_cluster'].unique()):\n",
        "    cities_in_cluster = df_combinado[df_combinado['dbscan_cluster'] == cluster_label]['City'].tolist()\n",
        "    print(f\"DBSCAN Cluster {cluster_label}: {cities_in_cluster}\")\n",
        "\n",
        "# 4. Discuss the implications and 5. Summarize similarities and differences\n",
        "print(\"\\n--- Comparison and Implications ---\")\n",
        "print(\"K-Means identified 3 distinct clusters based on minimizing inertia, attempting to partition all data points.\")\n",
        "print(\"DBSCAN, with the chosen parameters (eps=0.5, min_samples=5), identified 1 core cluster and treated the rest as noise.\")\n",
        "print(\"K-Means clusters tend to be more spherical and of similar size, while DBSCAN can find arbitrarily shaped clusters and identify outliers.\")\n",
        "print(\"In this case, K-Means grouped cities based on a balance of mobility and country index, leading to clusters that represent different levels of potential (high mobility/moderate country, moderate mobility/high country, low mobility/low country).\")\n",
        "print(\"DBSCAN, on the other hand, found a dense region of cities with moderate mobility and high country indices, classifying cities outside this dense region as noise. This suggests that only a specific group of cities forms a tightly packed cluster in this feature space with the chosen parameters.\")\n",
        "print(\"For identifying promising cities for EV sales, K-Means provides a broader categorization into potential tiers.\")\n",
        "print(\"DBSCAN highlights a very specific, tightly-grouped set of cities that are similar to each other in terms of both indices, while indicating that other cities are less similar to this core group or to each other.\")\n",
        "print(\"The definition of 'promising' depends on the clustering method: K-Means suggests cities in clusters 0 and 1 are promising, while DBSCAN highlights the cities in its single cluster (Cluster 0) as being similar and potentially promising, but doesn't offer tiered potential for the noise points.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of clusters found by K-Means (excluding noise): 3\n",
            "Number of clusters found by DBSCAN (excluding noise): 1\n",
            "\n",
            "K-Means Cluster Means:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         mobility_index  country_index\n",
              "cluster                               \n",
              "0             32.408376       0.374108\n",
              "1             18.326403       0.514647\n",
              "2             17.268124       0.237335"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c1776131-54f1-4467-8e5f-6d639266ffd6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.408376</td>\n",
              "      <td>0.374108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18.326403</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17.268124</td>\n",
              "      <td>0.237335</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1776131-54f1-4467-8e5f-6d639266ffd6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c1776131-54f1-4467-8e5f-6d639266ffd6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c1776131-54f1-4467-8e5f-6d639266ffd6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d2ed6a9b-a30f-4a22-b7d9-2dd8bac55cf6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d2ed6a9b-a30f-4a22-b7d9-2dd8bac55cf6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d2ed6a9b-a30f-4a22-b7d9-2dd8bac55cf6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_34e5eb6e-956f-4c62-99f5-5ed62788aab6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster_means')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_34e5eb6e-956f-4c62-99f5-5ed62788aab6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cluster_means');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cluster_means",
              "summary": "{\n  \"name\": \"cluster_means\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.452309299503828,\n        \"min\": 17.268123675170425,\n        \"max\": 32.40837648562137,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          32.40837648562137,\n          18.326402715004036,\n          17.268123675170425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13866038319206553,\n        \"min\": 0.23733473690252013,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.3741079172108334,\n          0.5146469800104813,\n          0.23733473690252013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DBSCAN Cluster Means (excluding noise):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                mobility_index  country_index\n",
              "dbscan_cluster                               \n",
              "0                    18.238619       0.514647"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f79d7ea-8a6a-4f07-a025-30ebc963445f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dbscan_cluster</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18.238619</td>\n",
              "      <td>0.514647</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f79d7ea-8a6a-4f07-a025-30ebc963445f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f79d7ea-8a6a-4f07-a025-30ebc963445f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f79d7ea-8a6a-4f07-a025-30ebc963445f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_60708e92-5d2d-44e8-8f9f-45b82909698f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dbscan_cluster_means')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_60708e92-5d2d-44e8-8f9f-45b82909698f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dbscan_cluster_means');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dbscan_cluster_means",
              "summary": "{\n  \"name\": \"dbscan_cluster_means\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"dbscan_cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.23861915362184,\n        \"max\": 18.23861915362184,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.23861915362184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.5146469800104813,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5146469800104813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "City assignments by K-Means Cluster:\n",
            "K-Means Cluster 0: ['lima', 'mexico-city', 'bogota']\n",
            "K-Means Cluster 1: ['brasilia', 'curitiba', 'fortaleza', 'porto-alegre', 'belo-horizonte', 'salvador', 'recife', 'rio-de-janeiro', 'sao-paulo']\n",
            "K-Means Cluster 2: ['montevideo', 'buenos-aires', 'santiago']\n",
            "\n",
            "City assignments by DBSCAN Cluster:\n",
            "DBSCAN Cluster -1: ['brasilia', 'curitiba', 'montevideo', 'buenos-aires', 'santiago', 'rio-de-janeiro', 'sao-paulo', 'lima', 'mexico-city', 'bogota']\n",
            "DBSCAN Cluster 0: ['fortaleza', 'porto-alegre', 'belo-horizonte', 'salvador', 'recife']\n",
            "\n",
            "--- Comparison and Implications ---\n",
            "K-Means identified 3 distinct clusters based on minimizing inertia, attempting to partition all data points.\n",
            "DBSCAN, with the chosen parameters (eps=0.5, min_samples=5), identified 1 core cluster and treated the rest as noise.\n",
            "K-Means clusters tend to be more spherical and of similar size, while DBSCAN can find arbitrarily shaped clusters and identify outliers.\n",
            "In this case, K-Means grouped cities based on a balance of mobility and country index, leading to clusters that represent different levels of potential (high mobility/moderate country, moderate mobility/high country, low mobility/low country).\n",
            "DBSCAN, on the other hand, found a dense region of cities with moderate mobility and high country indices, classifying cities outside this dense region as noise. This suggests that only a specific group of cities forms a tightly packed cluster in this feature space with the chosen parameters.\n",
            "For identifying promising cities for EV sales, K-Means provides a broader categorization into potential tiers.\n",
            "DBSCAN highlights a very specific, tightly-grouped set of cities that are similar to each other in terms of both indices, while indicating that other cities are less similar to this core group or to each other.\n",
            "The definition of 'promising' depends on the clustering method: K-Means suggests cities in clusters 0 and 1 are promising, while DBSCAN highlights the cities in its single cluster (Cluster 0) as being similar and potentially promising, but doesn't offer tiered potential for the noise points.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "30077559"
      },
      "source": [
        "## Identificar las ciudades más adecuadas (según el nuevo método)\n",
        "\n",
        "\n",
        "Basado en el análisis de los nuevos clusters, identificar las ciudades más prometedoras para la implementación o aumento de la venta de vehículos eléctricos de pequeña escala.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "fc0d2572",
        "outputId": "5328c7cb-3687-454a-e83d-a0cc2143a3d6"
      },
      "source": [
        "# Review the DBSCAN results from the previous steps.\n",
        "# DBSCAN identified one cluster (Cluster 0) and noise points (-1).\n",
        "# Cluster 0 includes cities with moderate mobility and high country index.\n",
        "# These cities are considered promising by DBSCAN as they form a dense group with similar characteristics.\n",
        "\n",
        "# Filter the df_combinado DataFrame to select cities in DBSCAN Cluster 0\n",
        "promising_cities_dbscan_df = df_combinado[df_combinado['dbscan_cluster'] == 0]\n",
        "\n",
        "print(\"Cities identified as most promising by DBSCAN (in Cluster 0):\")\n",
        "# Display the relevant columns for these cities\n",
        "display(promising_cities_dbscan_df[['City', 'country_complete', 'mobility_index', 'country_index', 'dbscan_cluster']])\n",
        "\n",
        "# Based on the analysis of DBSCAN Cluster 0, the cities within this cluster are considered most suitable\n",
        "# for the implementation or increase of small-scale electric vehicle sales according to this method.\n",
        "# These cities are characterized by forming a dense group with moderate mobility and high country indices,\n",
        "# suggesting a potentially receptive market and a favorable environment for EV adoption among similar cities."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cities identified as most promising by DBSCAN (in Cluster 0):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             City country_complete  mobility_index  country_index  \\\n",
              "2       fortaleza           Brazil       15.402945       0.514647   \n",
              "4    porto-alegre           Brazil       16.633797       0.514647   \n",
              "6  belo-horizonte           Brazil       18.490362       0.514647   \n",
              "8        salvador           Brazil       20.086253       0.514647   \n",
              "9          recife           Brazil       20.579738       0.514647   \n",
              "\n",
              "   dbscan_cluster  \n",
              "2               0  \n",
              "4               0  \n",
              "6               0  \n",
              "8               0  \n",
              "9               0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a73b611c-4408-4e39-8f11-67720ecc2e71\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>country_complete</th>\n",
              "      <th>mobility_index</th>\n",
              "      <th>country_index</th>\n",
              "      <th>dbscan_cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fortaleza</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>15.402945</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>porto-alegre</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>16.633797</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>belo-horizonte</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>18.490362</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>salvador</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>20.086253</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>recife</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>20.579738</td>\n",
              "      <td>0.514647</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a73b611c-4408-4e39-8f11-67720ecc2e71')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a73b611c-4408-4e39-8f11-67720ecc2e71 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a73b611c-4408-4e39-8f11-67720ecc2e71');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8f87c6b4-d571-42da-8ea3-8aa8a47afec3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f87c6b4-d571-42da-8ea3-8aa8a47afec3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8f87c6b4-d571-42da-8ea3-8aa8a47afec3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# suggesting a potentially receptive market and a favorable environment for EV adoption among similar cities\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"porto-alegre\",\n          \"recife\",\n          \"belo-horizonte\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_complete\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mobility_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2121521042128602,\n        \"min\": 15.402944595118171,\n        \"max\": 20.57973805855162,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          16.633797370456303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.5146469800104813,\n        \"max\": 0.5146469800104813,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5146469800104813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dbscan_cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}